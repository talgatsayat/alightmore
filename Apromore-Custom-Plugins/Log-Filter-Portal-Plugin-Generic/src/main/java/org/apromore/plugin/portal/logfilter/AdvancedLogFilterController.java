/*-
 * #%L
 * This file is part of "Apromore Core".
 * %%
 * Copyright (C) 2018 - 2022 Apromore Pty Ltd.
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */

package org.apromore.plugin.portal.logfilter;

import org.apromore.plugin.portal.PortalContext;
import org.apromore.plugin.portal.PortalLoggerFactory;
import org.apromore.portal.model.LogSummaryType;
import org.apromore.portal.model.SummaryType;
import org.apromore.portal.model.VersionSummaryType;
import org.springframework.beans.factory.annotation.Autowired;
import org.apromore.plugin.portal.logfilter.generic.LogFilterClient;
import org.apromore.plugin.portal.logfilter.generic.LogFilterResponse;
import org.apromore.apmlog.filter.rules.LogFilterRule;
import org.apromore.apmlog.filter.rules.LogFilterRuleImpl;
import org.apromore.apmlog.filter.rules.RuleValue;
import org.apromore.apmlog.filter.types.Choice;
import org.apromore.apmlog.filter.types.FilterType;
import org.apromore.apmlog.filter.types.Inclusion;
import org.apromore.apmlog.filter.types.OperationType;
import org.apromore.apmlog.filter.types.Section;
import org.apromore.apmlog.filter.PLog;
import org.apromore.apmlog.filter.APMLogFilter;

import org.apromore.apmlog.APMLog;
import org.apromore.apmlog.ATrace;
import org.apromore.apmlog.logobjects.ActivityInstance;
import org.apromore.apmlog.exceptions.EmptyInputException;


import org.slf4j.Logger;
import org.zkoss.zk.ui.Component;
import org.zkoss.zk.ui.event.Events;
import org.zkoss.zk.ui.select.SelectorComposer;
import org.zkoss.zk.ui.select.annotation.Wire;
import org.zkoss.zk.ui.select.annotation.Listen;
import org.zkoss.zk.ui.Executions;
import org.zkoss.zk.ui.Sessions;
import org.zkoss.zk.ui.util.Clients;
import org.zkoss.zul.*;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.ArrayList;
import java.util.List;
import java.util.HashSet;
import java.util.Set;
import java.util.Arrays;

import java.util.*;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ Apromore
 */
public class AdvancedLogFilterController extends SelectorComposer<Component> {

    private static final Logger LOGGER = PortalLoggerFactory.getLogger(AdvancedLogFilterController.class);

    // Main window
    @Wire private Window advancedLogFilterWindow;
    
    // Log information display
    @Wire private Label logNameLabel;
    @Wire private Label eventCountLabel;
    @Wire private Label caseCountLabel;

    // Navigation buttons
    @Wire private Button caseAttributeNav;
    @Wire private Button caseVariantNav;
    @Wire private Button caseIdNav;
    @Wire private Button timeframeNav;
    @Wire private Button performanceNav;
    @Wire private Button pathNav;
    @Wire private Button reworkNav;
    @Wire private Button blocksNav;
    @Wire private Button eventAttributeNav;
    @Wire private Button eventTimeframeNav;
    @Wire private Button eventFrequencyNav;
    @Wire private Button eventPerformanceNav;
    @Wire private Button eventPathNav;
    @Wire private Button eventBetweenNav;

    // Content panels
    @Wire private Div caseAttributePanel;
    @Wire private Div caseIdPanel;
    @Wire private Div caseVariantPanel;
    @Wire private Div timeframePanel;
    @Wire private Div performancePanel;
    @Wire private Div pathPanel;
    @Wire private Div reworkPanel;
    @Wire private Div blocksPanel;

    // Case Attribute Filter components
    @Wire private Radiogroup caseAttributeCondition;
    @Wire private Radiogroup primaryAttributeType;
    @Wire private Combobox primaryAttributeCombo;
    @Wire private Checkbox useSecondaryAttribute;
    @Wire private Radiogroup secondaryAttributeType;
    @Wire private Combobox secondaryAttributeCombo;
    @Wire private Radiogroup matchingCondition;
    @Wire private Textbox valueSearchBox;
    @Wire private Listbox attributeValuesList;
    @Wire private Label caseAttributeStats;

    // Case ID Filter components
    @Wire private Radiogroup caseIdCondition;
    @Wire private Listbox caseIdValuesList;
    @Wire private Label caseIdStats;

    // Control buttons
    @Wire private Button cancelBtn;
    @Wire private Button applyFiltersBtn;
    @Wire private Button applyFiltersBtnCaseAttribute;
    @Wire private Button applyFiltersBtnCaseId;

    // Pagination buttons for attributes
    @Wire private Button firstPageBtn;
    @Wire private Button prevPageBtn;
    @Wire private Button nextPageBtn;
    @Wire private Button lastPageBtn;
    @Wire private Label pageLabel;
    @Wire private Label pageInfo;
    @Wire private Label totalInfo;

    // Pagination buttons for Case ID
    @Wire private Button caseIdFirstPageBtn;
    @Wire private Button caseIdPrevPageBtn;
    @Wire private Button caseIdNextPageBtn;
    @Wire private Button caseIdLastPageBtn;
    @Wire private Label caseIdPageLabel;
    @Wire private Label caseIdPageInfo;
    @Wire private Label caseIdTotalInfo;

    // Internal state
    private String currentFilter = "caseAttribute";
    
    // Log information
    private PortalContext portalContext;
    private LogSummaryType selectedLog;
    private String logName;
    private Integer logId;
    
    // Process Discoverer integration
    private LogFilterClient logFilterClient;
    private APMLog apmLog;
    private List<LogFilterRule> currentCriteria;
    
    // Pagination state
    private static final int ITEMS_PER_PAGE = 100;
    private int currentAttributePage = 1;
    private int currentCaseIdPage = 1;
    private List<String> allAttributeValues = new ArrayList<>();
    private List<String> allCaseIdValues = new ArrayList<>();
    
    @Autowired(required = false)
    private Object processDiscovererPlugin;

    @Override
    public void doAfterCompose(Component comp) throws Exception {
        super.doAfterCompose(comp);
        LOGGER.info("AdvancedLogFilterController initialized");
        
        extractLogInformation();
        updateLogInfoDisplay();
        initializeNavigation();
        initializeControlButtons();
        loadLogData();
        
        // Show default panel
        showPanel("caseAttribute");
    }
    
    /**
     * Event handler for primary attribute selection change
     */
    @Listen("onChange = #primaryAttributeCombo")
    public void onPrimaryAttributeChange() {
        try {
            LOGGER.info("üîÑ –ò–∑–º–µ–Ω–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è...");
            loadAttributeValuesForLog();
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞", e);
        }
    }
    
    /**
     * Event handler for primary attribute type change (Event vs Case)
     */
    @Listen("onChange = #primaryAttributeType")
    public void onPrimaryAttributeTypeChange() {
        try {
            LOGGER.info("üîÑ –ò–∑–º–µ–Ω–µ–Ω —Ç–∏–ø –∞—Ç—Ä–∏–±—É—Ç–∞ (Event/Case), –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è...");
            loadAttributeValuesForLog();
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ –∞—Ç—Ä–∏–±—É—Ç–∞", e);
        }
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ª–æ–≥–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ZK
     */
    private void extractLogInformation() {
        try {
            Map<?, ?> args = Executions.getCurrent().getArg();
            if (args != null) {
                this.portalContext = (PortalContext) args.get("portalContext");
                this.selectedLog = (LogSummaryType) args.get("selectedLog");
                this.logName = (String) args.get("logName");
                this.logId = (Integer) args.get("logId");
                
                // –ü–æ–ª—É—á–∞–µ–º APMLog
                Object apmLogObj = args.get("apmLog");
                if (apmLogObj instanceof APMLog) {
                    apmLog = (APMLog) apmLogObj;
                    LOGGER.info("APMLog –ø–æ–ª—É—á–µ–Ω: {} —Ç—Ä–∞—Å—Å", apmLog.getTraces().size());
                }
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                Object criteriaObj = args.get("currentCriteria");
                if (criteriaObj instanceof List) {
                    currentCriteria = (List<LogFilterRule>) criteriaObj;
                    LOGGER.info("–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã: {} –ø—Ä–∞–≤–∏–ª", currentCriteria.size());
                }
                
                // –ü–æ–ª—É—á–∞–µ–º LogFilterClient
                Object clientObj = args.get("logFilterClient");
                if (clientObj instanceof LogFilterClient) {
                    logFilterClient = (LogFilterClient) clientObj;
                    LOGGER.info("LogFilterClient –ø–æ–ª—É—á–µ–Ω");
                }
                
                LOGGER.info("–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–µ: {} (ID: {})", logName, logId);
                LOGGER.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–µ –∏–∑–≤–ª–µ—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
            } else {
                LOGGER.warn("–ê—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
                this.logName = "Sample Log";
                this.logId = -1;
            }
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–≥–µ", e);
            this.logName = "Unknown Log";
            this.logId = -1;
        }
    }

    /**
     * Update log information display components
     */
    private void updateLogInfoDisplay() {
        try {
            // Update window title
                    if (advancedLogFilterWindow != null && logName != null && !logName.isEmpty()) {
            advancedLogFilterWindow.setTitle("Filter log: " + logName);
                LOGGER.info("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: Filter log: {}", logName);
            }
            
            // Update log name
            if (logNameLabel != null) {
                if (logName != null && !logName.isEmpty()) {
                    logNameLabel.setValue(logName);
                    LOGGER.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –∏–º—è –ª–æ–≥–∞: {}", logName);
                } else {
                    logNameLabel.setValue("Unknown Log");
                    LOGGER.warn("–ò–º—è –ª–æ–≥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");
                }
            } else {
                LOGGER.warn("logNameLabel –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }

            // Update event and case counts
            if (selectedLog != null && logId != null && logId > 0) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–∞
                    loadRealLogStatistics();
                } catch (Exception e) {
                    LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–∞", e);
                    // Fallback to default values
                    if (eventCountLabel != null) {
                        eventCountLabel.setValue("Loading events...");
                    }
                    if (caseCountLabel != null) {
                        caseCountLabel.setValue("Loading cases...");
                    }
                }
            } else {
                // Sample data for testing
                if (eventCountLabel != null) {
                    eventCountLabel.setValue("10,000 events (sample)");
                }
                if (caseCountLabel != null) {
                    caseCountLabel.setValue("1,000 cases (sample)");
                }
                LOGGER.warn("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–≥–ª—É—à–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
            }

        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–≥–µ", e);
            
            // Fallback values
            if (logNameLabel != null) logNameLabel.setValue("Error loading log name");
            if (eventCountLabel != null) eventCountLabel.setValue("N/A");
            if (caseCountLabel != null) caseCountLabel.setValue("N/A");
        }
    }

    /**
     * Load real log statistics from the selected log
     */
    private void loadRealLogStatistics() {
        try {
            if (apmLog != null) {
                LOGGER.info("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–∞ –∏–∑ APMLog");
                
                // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ APMLog
                int eventCount = 0;
                int caseCount = apmLog.getTraces().size();
                
                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
                for (ATrace trace : apmLog.getTraces()) {
                    eventCount += trace.getActivityInstances().size();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if (eventCountLabel != null) {
                    eventCountLabel.setValue(String.format("%,d events", eventCount));
                }
                if (caseCountLabel != null) {
                    caseCountLabel.setValue(String.format("%,d cases", caseCount));
                }
                
                LOGGER.info("–í—ã—á–∏—Å–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ª–æ–≥–∞ '{}' (ID: {}): {} events, {} cases", 
                           logName, logId, eventCount, caseCount);
                
            } else if (logId != null && logId > 0) {
                LOGGER.warn("APMLog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
                if (eventCountLabel != null) {
                    eventCountLabel.setValue("Loading events...");
                }
                if (caseCountLabel != null) {
                    caseCountLabel.setValue("Loading cases...");
                }
            } else {
                LOGGER.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ª–æ–≥–∞: {}", logId);
                if (eventCountLabel != null) {
                    eventCountLabel.setValue("N/A");
                }
                if (caseCountLabel != null) {
                    caseCountLabel.setValue("N/A");
                }
            }

        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–∞", e);
            
            // Fallback values
            if (eventCountLabel != null) {
                eventCountLabel.setValue("Error loading events");
            }
            if (caseCountLabel != null) {
                caseCountLabel.setValue("Error loading cases");
            }
        }
    }

    /**
     * Load real log data for filtering
     */
    private void loadLogData() {
        try {
            if (selectedLog != null && logId != null && logId > 0) {
                LOGGER.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∞: {} (ID: {})", logName, logId);
                
                // TODO: –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å EventLogService
                // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞
                loadAttributeData();
                loadCaseIdData();
                updateStatistics();
                
                LOGGER.info("–î–∞–Ω–Ω—ã–µ –ª–æ–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
            } else {
                LOGGER.warn("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–≥–ª—É—à–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ª–æ–≥ –Ω–µ –≤—ã–±—Ä–∞–Ω");
                loadSampleData();
            }
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ª–æ–≥–∞", e);
            loadSampleData();
        }
    }

    /**
     * Load attribute values from the selected log
     */
    private void loadAttributeData() {
        try {
            LOGGER.info("üîÑ === –ù–ê–ß–ê–õ–û loadAttributeData() ===");
            
            if (attributeValuesList != null) {
                LOGGER.info("‚úÖ attributeValuesList –¥–æ—Å—Ç—É–ø–µ–Ω");
                attributeValuesList.getItems().clear();
                
                // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ –ª–æ–≥–∞
                if (primaryAttributeCombo != null) {
                    LOGGER.info("‚úÖ primaryAttributeCombo –¥–æ—Å—Ç—É–ø–µ–Ω");
                    LOGGER.info("üîß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ primaryAttributeCombo –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏: {}", primaryAttributeCombo.getItemCount());
                    
                    loadAvailableAttributesFromLog();
                    
                    LOGGER.info("üîß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ primaryAttributeCombo –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {}", primaryAttributeCombo.getItemCount());
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ç—Ä–∏–±—É—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π
                    if (primaryAttributeCombo.getItemCount() > 0) {
                        LOGGER.info("‚úÖ –ê—Ç—Ä–∏–±—É—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞...");
                        
                        Comboitem selectedItem = primaryAttributeCombo.getSelectedItem();
                        if (selectedItem != null) {
                            LOGGER.debug("‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: " + selectedItem.getValue());
                        } else {
                            LOGGER.warn("‚ö†Ô∏è –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤");
                        }
                        
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–∞
                        loadAttributeValuesForLog();
                    } else {
                        LOGGER.warn("‚ö†Ô∏è –ê—Ç—Ä–∏–±—É—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∑–Ω–∞—á–µ–Ω–∏–π");
                    }
                } else {
                    LOGGER.warn("‚ö†Ô∏è primaryAttributeCombo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                }
            } else {
                LOGGER.warn("‚ö†Ô∏è attributeValuesList –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            }
            
            LOGGER.info("üîÑ === –ö–û–ù–ï–¶ loadAttributeData() ===");
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤", e);
        }
    }
    
    /**
     * Load available attributes from the current log
     */
    private void loadAvailableAttributesFromLog() {
        try {
            if (primaryAttributeCombo == null) {
                LOGGER.warn("primaryAttributeCombo –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }
            
            LOGGER.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ –ª–æ–≥–∞: {} (ID: {})", logName, logId);
            
            // –û—á–∏—â–∞–µ–º –∫–æ–º–±–æ–±–æ–∫—Å
            primaryAttributeCombo.getItems().clear();
            
            if (apmLog != null) {
                LOGGER.info("üîß APMLog –¥–æ—Å—Ç—É–ø–µ–Ω, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Å—Å: {}", apmLog.getTraces().size());
                
                // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ –ª–æ–≥–∞
                Set<String> availableAttributes = new HashSet<>();
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                availableAttributes.add("concept:name");
                availableAttributes.add("concept:case:id");
                LOGGER.info("üîß –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã: concept:name, concept:case:id");
                
                // –°–æ–±–∏—Ä–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ —Ç—Ä–∞—Å—Å (case attributes)
                int caseAttributeCount = 0;
                for (ATrace trace : apmLog.getTraces()) {
                    if (trace.getAttributes() != null) {
                        caseAttributeCount += trace.getAttributes().size();
                        availableAttributes.addAll(trace.getAttributes().keySet());
                    }
                }
                LOGGER.info("üîß –ù–∞–π–¥–µ–Ω–æ {} case –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ {} —Ç—Ä–∞—Å—Å–∞—Ö", caseAttributeCount, apmLog.getTraces().size());
                
                // –°–æ–±–∏—Ä–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (event attributes)
                int eventAttributeCount = 0;
                int totalActivityInstances = 0;
                for (ATrace trace : apmLog.getTraces()) {
                    totalActivityInstances += trace.getActivityInstances().size();
                    for (ActivityInstance activityInstance : trace.getActivityInstances()) {
                        if (activityInstance.getAttributes() != null) {
                            eventAttributeCount += activityInstance.getAttributes().size();
                            availableAttributes.addAll(activityInstance.getAttributes().keySet());
                        }
                    }
                }
                LOGGER.info("üîß –ù–∞–π–¥–µ–Ω–æ {} event –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ {} —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", eventAttributeCount, totalActivityInstances);
                
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                List<String> sortedAttributes = new ArrayList<>(availableAttributes);
                Collections.sort(sortedAttributes);
                
                LOGGER.info("üîß –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {}", sortedAttributes.size());
                LOGGER.info("üîß –°–ø–∏—Å–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {}", sortedAttributes);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –≤ –∫–æ–º–±–æ–±–æ–∫—Å
                for (String attribute : sortedAttributes) {
                    primaryAttributeCombo.appendItem(attribute);
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∞—Ç—Ä–∏–±—É—Ç –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π
                if (sortedAttributes.size() > 0) {
                    primaryAttributeCombo.setSelectedIndex(0);
                    LOGGER.info("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–≤—ã–π –∞—Ç—Ä–∏–±—É—Ç –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π: {}", sortedAttributes.get(0));
                }
                
                LOGGER.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –ª–æ–≥–∞: {}", sortedAttributes.size(), logName);
                
            } else {
                LOGGER.warn("‚ö†Ô∏è APMLog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã");
                // Fallback to standard attributes
                primaryAttributeCombo.appendItem("concept:name");
                primaryAttributeCombo.appendItem("concept:case:id");
                primaryAttributeCombo.appendItem("org:resource");
                primaryAttributeCombo.appendItem("lifecycle:transition");
                primaryAttributeCombo.appendItem("time:timestamp");
                primaryAttributeCombo.setSelectedIndex(0);
                LOGGER.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã (fallback)");
            }
            
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏–∑ –ª–æ–≥–∞: {}", logName, e);
            // Fallback to standard attributes
            primaryAttributeCombo.appendItem("concept:name");
            primaryAttributeCombo.appendItem("concept:case:id");
            primaryAttributeCombo.setSelectedIndex(0);
        }
    }

    /**
     * Load attribute values based on the selected log
     */
    private void loadAttributeValuesForLog() {
        try {
            if (attributeValuesList == null) {
                LOGGER.warn("‚ö†Ô∏è attributeValuesList –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            LOGGER.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ –¥–ª—è –ª–æ–≥–∞: {} (ID: {})", logName, logId);

            // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            attributeValuesList.getItems().clear();
            allAttributeValues.clear();

            if (apmLog != null && primaryAttributeCombo != null) {
                // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç
                Comboitem selectedItem = primaryAttributeCombo.getSelectedItem();
                if (selectedItem == null) {
                    LOGGER.warn("‚ö†Ô∏è –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ primaryAttributeCombo");
                    return;
                }
                
                String selectedAttribute = selectedItem.getValue();
                LOGGER.info("üîß –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç: {}", selectedAttribute);
                
                // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞ –∏–∑ APMLog
                Map<String, Integer> attributeValueCounts = new HashMap<>();
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞—Ç—Ä–∏–±—É—Ç–∞ (case –∏–ª–∏ event)
                boolean isCaseAttribute = selectedAttribute.equals("concept:case:id") || 
                                       selectedAttribute.equals("concept:name") ||
                                       selectedAttribute.startsWith("case:");
                
                LOGGER.info("üîß –¢–∏–ø –∞—Ç—Ä–∏–±—É—Ç–∞: {}", isCaseAttribute ? "CASE" : "EVENT");
                LOGGER.info("üîß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Å—Å –≤ –ª–æ–≥–µ: {}", apmLog.getTraces().size());
                
                if (isCaseAttribute) {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º case attributes
                    LOGGER.info("üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CASE –∞—Ç—Ä–∏–±—É—Ç—ã...");
                    int foundCaseValues = 0;
                    for (ATrace trace : apmLog.getTraces()) {
                        if (trace.getAttributes() != null && trace.getAttributes().containsKey(selectedAttribute)) {
                            String value = trace.getAttributes().get(selectedAttribute).toString();
                            if (value != null && !value.isEmpty()) {
                                attributeValueCounts.put(value, attributeValueCounts.getOrDefault(value, 0) + 1);
                                foundCaseValues++;
                            }
                        }
                    }
                    LOGGER.info("üîß –ù–∞–π–¥–µ–Ω–æ {} –∑–Ω–∞—á–µ–Ω–∏–π CASE –∞—Ç—Ä–∏–±—É—Ç–∞ '{}'", foundCaseValues, selectedAttribute);
                } else {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º event attributes
                    LOGGER.info("üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º EVENT –∞—Ç—Ä–∏–±—É—Ç—ã...");
                    int totalActivityInstances = 0;
                    int foundEventValues = 0;
                    for (ATrace trace : apmLog.getTraces()) {
                        totalActivityInstances += trace.getActivityInstances().size();
                        for (ActivityInstance activityInstance : trace.getActivityInstances()) {
                            if (activityInstance.getAttributes() != null && 
                                activityInstance.getAttributes().containsKey(selectedAttribute)) {
                                String value = activityInstance.getAttributes().get(selectedAttribute).toString();
                                if (value != null && !value.isEmpty()) {
                                    attributeValueCounts.put(value, attributeValueCounts.getOrDefault(value, 0) + 1);
                                    foundEventValues++;
                                }
                            }
                        }
                    }
                    LOGGER.info("üîß –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {}", totalActivityInstances);
                    LOGGER.info("üîß –ù–∞–π–¥–µ–Ω–æ {} –∑–Ω–∞—á–µ–Ω–∏–π EVENT –∞—Ç—Ä–∏–±—É—Ç–∞ '{}'", foundEventValues, selectedAttribute);
                }
                
                LOGGER.info("üîß –ù–∞–π–¥–µ–Ω–æ {} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç–∞ '{}'", attributeValueCounts.size(), selectedAttribute);
                LOGGER.info("üîß –î–µ—Ç–∞–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–π: {}", attributeValueCounts);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                allAttributeValues.addAll(attributeValueCounts.keySet());
                LOGGER.info("üîß allAttributeValues –∑–∞–ø–æ–ª–Ω–µ–Ω: {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", allAttributeValues.size());
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                currentAttributePage = 1;
                displayAttributePage(currentAttributePage);
                
                LOGGER.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã {} –∑–Ω–∞—á–µ–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç–∞ '{}' –¥–ª—è –ª–æ–≥–∞: {}", 
                           attributeValueCounts.size(), selectedAttribute, logName);
                
            } else {
                LOGGER.warn("‚ö†Ô∏è APMLog –∏–ª–∏ primaryAttributeCombo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
                if (apmLog == null) {
                    LOGGER.warn("‚ö†Ô∏è APMLog = null");
                }
                if (primaryAttributeCombo == null) {
                    LOGGER.warn("‚ö†Ô∏è primaryAttributeCombo = null");
                }
                // Fallback to sample data
                allAttributeValues.addAll(Arrays.asList("Value A", "Value B", "Value C", "Value D", "Value E"));
                currentAttributePage = 1;
                displayAttributePage(currentAttributePage);
            }

        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–Ω–∞—á–µ–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç–∞ –¥–ª—è –ª–æ–≥–∞: {}", logName, e);
        }
    }

    /**
     * Add attribute value to the list
     */
    private void addAttributeValue(String value, int cases, double frequency) {
        try {
            if (attributeValuesList != null) {
                LOGGER.debug("üîß –°–æ–∑–¥–∞–µ–º Listitem –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è: '{}', –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {}, —á–∞—Å—Ç–æ—Ç–∞: {:.2f}%", value, cases, frequency);
                
                Listitem item = new Listitem();
                item.appendChild(new Listcell(value));
                item.appendChild(new Listcell(String.valueOf(cases)));
                item.appendChild(new Listcell(String.format("%.1f%%", frequency)));
                
                attributeValuesList.appendChild(item);
                
                LOGGER.debug("‚úÖ Listitem –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è: '{}'", value);
            } else {
                LOGGER.warn("‚ö†Ô∏è attributeValuesList == null –≤ addAttributeValue");
            }
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ '{}' –≤ —Ç–∞–±–ª–∏—Ü—É", value, e);
        }
    }

    /**
     * Load case IDs from the selected log
     */
    private void loadCaseIdData() {
        try {
            if (caseIdValuesList != null) {
                caseIdValuesList.getItems().clear();
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º Case ID –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∞
                loadCaseIdsForLog();
            }
        } catch (Exception e) {
            LOGGER.error("Error loading case ID data", e);
        }
    }

    /**
     * Load Case IDs based on the selected log
     */
    private void loadCaseIdsForLog() {
        try {
            if (caseIdValuesList == null) {
                LOGGER.warn("‚ö†Ô∏è caseIdValuesList –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            LOGGER.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º Case ID –¥–ª—è –ª–æ–≥–∞: {} (ID: {})", logName, logId);

            // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            caseIdValuesList.getItems().clear();
            allCaseIdValues.clear();

            if (apmLog != null) {
                // –ü–æ–ª—É—á–∞–µ–º Case ID –∏–∑ APMLog
                Map<String, Integer> caseIdCounts = new HashMap<>();
                
                for (ATrace trace : apmLog.getTraces()) {
                    String caseId = trace.getCaseId();
                    if (caseId != null && !caseId.isEmpty()) {
                        int eventCount = trace.getActivityInstances().size();
                        caseIdCounts.put(caseId, eventCount);
                    }
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ Case ID –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                allCaseIdValues.addAll(caseIdCounts.keySet());
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                currentCaseIdPage = 1;
                displayCaseIdPage(currentCaseIdPage);
                
                LOGGER.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã {} Case ID –¥–ª—è –ª–æ–≥–∞: {}", caseIdCounts.size(), logName);
                
            } else {
                LOGGER.warn("‚ö†Ô∏è APMLog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
                // Fallback to sample data
                allCaseIdValues.addAll(Arrays.asList("Case_001", "Case_002", "Case_003", "Case_004", "Case_005"));
                currentCaseIdPage = 1;
                displayCaseIdPage(currentCaseIdPage);
            }

        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Case ID –¥–ª—è –ª–æ–≥–∞: {}", logName, e);
        }
    }

    /**
     * Add case ID to the list
     */
    private void addCaseId(String caseId, int activityInstances) {
        if (caseIdValuesList != null) {
            Listitem item = new Listitem();
            item.appendChild(new Listcell(caseId));
            item.appendChild(new Listcell(String.valueOf(activityInstances)));
            
            caseIdValuesList.appendChild(item);
        }
    }

    /**
     * Update statistics labels
     */
    private void updateStatistics() {
        try {
            int totalCases = 428; // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞
            
            if (caseAttributeStats != null) {
                caseAttributeStats.setValue(String.format("0%% ( 0 / %d )", totalCases));
            }
            
            if (caseIdStats != null) {
                caseIdStats.setValue(String.format("0%% ( 0 / %d )", totalCases));
            }
            
        } catch (Exception e) {
            LOGGER.error("Error updating statistics", e);
        }
    }

    /**
     * Load sample data when real log is not available
     */
    private void loadSampleData() {
        try {
            LOGGER.info("Loading sample data for testing");
            loadAttributeData();
            loadCaseIdData();
            updateStatistics();
        } catch (Exception e) {
            LOGGER.error("Error loading sample data", e);
        }
    }

    /**
     * Initialize navigation event handlers
     */
    private void initializeNavigation() {
        try {
            // Case filter navigation
            if (caseAttributeNav != null) {
                caseAttributeNav.addEventListener(Events.ON_CLICK, event -> showPanel("caseAttribute"));
            }
            if (caseVariantNav != null) {
                caseVariantNav.addEventListener(Events.ON_CLICK, event -> showPanel("caseVariant"));
            }
            if (caseIdNav != null) {
                caseIdNav.addEventListener(Events.ON_CLICK, event -> showPanel("caseId"));
            }
            if (timeframeNav != null) {
                timeframeNav.addEventListener(Events.ON_CLICK, event -> showPanel("timeframe"));
            }
            if (performanceNav != null) {
                performanceNav.addEventListener(Events.ON_CLICK, event -> showPanel("performance"));
            }
            if (pathNav != null) {
                pathNav.addEventListener(Events.ON_CLICK, event -> showPanel("path"));
            }
            if (reworkNav != null) {
                reworkNav.addEventListener(Events.ON_CLICK, event -> showPanel("rework"));
            }
            if (blocksNav != null) {
                blocksNav.addEventListener(Events.ON_CLICK, event -> showPanel("blocks"));
            }

            // Event filter navigation  
            if (eventAttributeNav != null) {
                eventAttributeNav.addEventListener(Events.ON_CLICK, event -> showPanel("eventAttribute"));
            }
            if (eventTimeframeNav != null) {
                eventTimeframeNav.addEventListener(Events.ON_CLICK, event -> showPanel("eventTimeframe"));
            }
            if (eventFrequencyNav != null) {
                eventFrequencyNav.addEventListener(Events.ON_CLICK, event -> showPanel("eventFrequency"));
            }
            if (eventPerformanceNav != null) {
                eventPerformanceNav.addEventListener(Events.ON_CLICK, event -> showPanel("eventPerformance"));
            }
            if (eventPathNav != null) {
                eventPathNav.addEventListener(Events.ON_CLICK, event -> showPanel("eventPath"));
            }
            if (eventBetweenNav != null) {
                eventBetweenNav.addEventListener(Events.ON_CLICK, event -> showPanel("eventBetween"));
            }

            LOGGER.info("Navigation initialized");
        } catch (Exception e) {
            LOGGER.error("Error initializing navigation", e);
        }
    }

    /**
     * Initialize control buttons
     */
    private void initializeControlButtons() {
        try {
            if (cancelBtn != null) {
                cancelBtn.addEventListener(Events.ON_CLICK, event -> clearAllFilters());
            }
            if (applyFiltersBtn != null) {
                applyFiltersBtn.addEventListener(Events.ON_CLICK, event -> applyFiltersAndRedirect());
            }
            if (applyFiltersBtnCaseAttribute != null) {
                applyFiltersBtnCaseAttribute.addEventListener(Events.ON_CLICK, event -> applyFiltersAndRedirect());
            }
            if (applyFiltersBtnCaseId != null) {
                applyFiltersBtnCaseId.addEventListener(Events.ON_CLICK, event -> applyFiltersAndRedirect());
            }
            
            // Initialize secondary attribute checkbox
            if (useSecondaryAttribute != null) {
                useSecondaryAttribute.addEventListener(Events.ON_CHECK, event -> {
                    boolean enabled = useSecondaryAttribute.isChecked();
                    if (secondaryAttributeType != null) secondaryAttributeType.setDisabled(!enabled);
                    if (secondaryAttributeCombo != null) secondaryAttributeCombo.setDisabled(!enabled);
                });
            }

            LOGGER.info("Control buttons initialized");
        } catch (Exception e) {
            LOGGER.error("Error initializing control buttons", e);
        }
    }



    /**
     * Show specific filter panel and update navigation
     */
    private void showPanel(String panelName) {
        try {
            // Hide all panels
            hideAllPanels();
            
            // Reset all navigation button styles
            resetNavigation();
            
            // Show selected panel and highlight navigation
            switch (panelName) {
                case "caseAttribute":
                    if (caseAttributePanel != null) caseAttributePanel.setVisible(true);
                    if (caseAttributeNav != null) caseAttributeNav.setSclass("filter-nav-item selected");
                    break;
                case "caseId":
                    if (caseIdPanel != null) caseIdPanel.setVisible(true);
                    if (caseIdNav != null) caseIdNav.setSclass("filter-nav-item selected");
                    break;
                case "caseVariant":
                    if (caseVariantPanel != null) caseVariantPanel.setVisible(true);
                    if (caseVariantNav != null) caseVariantNav.setSclass("filter-nav-item selected");
                    break;
                case "timeframe":
                    if (timeframePanel != null) timeframePanel.setVisible(true);
                    if (timeframeNav != null) timeframeNav.setSclass("filter-nav-item selected");
                    break;
                case "performance":
                    if (performancePanel != null) performancePanel.setVisible(true);
                    if (performanceNav != null) performanceNav.setSclass("filter-nav-item selected");
                    break;
                case "path":
                    if (pathPanel != null) pathPanel.setVisible(true);
                    if (pathNav != null) pathNav.setSclass("filter-nav-item selected");
                    break;
                case "rework":
                    if (reworkPanel != null) reworkPanel.setVisible(true);
                    if (reworkNav != null) reworkNav.setSclass("filter-nav-item selected");
                    break;
                case "blocks":
                    if (blocksPanel != null) blocksPanel.setVisible(true);
                    if (blocksNav != null) blocksNav.setSclass("filter-nav-item selected");
                    break;
                // Event filters would be handled similarly
                default:
                    LOGGER.warn("Unknown panel: " + panelName);
                    // Default to case attribute
                    if (caseAttributePanel != null) caseAttributePanel.setVisible(true);
                    if (caseAttributeNav != null) caseAttributeNav.setSclass("filter-nav-item selected");
                    break;
            }
            
            this.currentFilter = panelName;
            LOGGER.info("Switched to {} filter panel", panelName);
            
        } catch (Exception e) {
            LOGGER.error("Error showing panel: " + panelName, e);
        }
    }

    /**
     * Hide all filter panels
     */
    private void hideAllPanels() {
        if (caseAttributePanel != null) caseAttributePanel.setVisible(false);
        if (caseIdPanel != null) caseIdPanel.setVisible(false);
        if (caseVariantPanel != null) caseVariantPanel.setVisible(false);
        if (timeframePanel != null) timeframePanel.setVisible(false);
        if (performancePanel != null) performancePanel.setVisible(false);
        if (pathPanel != null) pathPanel.setVisible(false);
        if (reworkPanel != null) reworkPanel.setVisible(false);
        if (blocksPanel != null) blocksPanel.setVisible(false);
    }

    /**
     * Reset all navigation button styles
     */
    private void resetNavigation() {
        if (caseAttributeNav != null) caseAttributeNav.setSclass("filter-nav-item");
        if (caseVariantNav != null) caseVariantNav.setSclass("filter-nav-item");
        if (caseIdNav != null) caseIdNav.setSclass("filter-nav-item");
        if (timeframeNav != null) timeframeNav.setSclass("filter-nav-item");
        if (performanceNav != null) performanceNav.setSclass("filter-nav-item");
        if (pathNav != null) pathNav.setSclass("filter-nav-item");
        if (reworkNav != null) reworkNav.setSclass("filter-nav-item");
        if (blocksNav != null) blocksNav.setSclass("filter-nav-item");
        if (eventAttributeNav != null) eventAttributeNav.setSclass("filter-nav-item");
        if (eventTimeframeNav != null) eventTimeframeNav.setSclass("filter-nav-item");
        if (eventFrequencyNav != null) eventFrequencyNav.setSclass("filter-nav-item");
        if (eventPerformanceNav != null) eventPerformanceNav.setSclass("filter-nav-item");
        if (eventPathNav != null) eventPathNav.setSclass("filter-nav-item");
        if (eventBetweenNav != null) eventBetweenNav.setSclass("filter-nav-item");
    }

    /**
     * Apply filters and redirect to Process Discoverer
     */
    private void applyFiltersAndRedirect() {
        try {
            LOGGER.info("üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –ª–æ–≥—É: {} (ID: {})", logName, logId);
            
            // Get current filter settings
            String filterDescription = getCurrentFilterDescription();
            
            // Get selected items for filtering
            List<String> selectedValues = getSelectedFilterValues();
            
            if (selectedValues.isEmpty()) {
                Messagebox.show("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", 
                              "–§–∏–ª—å—Ç—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã", Messagebox.OK, Messagebox.EXCLAMATION);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã —Å Process Discoverer
            if (logFilterClient != null) {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ Process Discoverer
                applyFiltersToProcessDiscoverer(selectedValues, filterDescription);
            } else {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º Process Discoverer —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
                openInProcessDiscoverer(selectedValues, filterDescription);
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            closeWindow();
            
            LOGGER.info("üéØ –§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã: {} –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è {}", selectedValues.size(), filterDescription);
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ {} (ID: {})", logName, logId, e);
            Messagebox.show("–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ " + (logName != null ? logName : "–ª–æ–≥—É") + ": " + e.getMessage(), 
                          "–û—à–∏–±–∫–∞", Messagebox.OK, Messagebox.ERROR);
        }
    }

    /**
     * Clear all filters and restore original log
     */
    public void clearAllFilters() {
        try {
            LOGGER.info("üßπ –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ª–æ–≥–∞: {} (ID: {})", logName, logId);
            
            // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            // Process Discoverer —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
            closeWindow();
            
            LOGGER.info("‚úÖ –û–∫–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–æ");
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤", e);
            Messagebox.show("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: " + e.getMessage(), 
                          "–û—à–∏–±–∫–∞", Messagebox.OK, Messagebox.ERROR);
        }
    }
    
    /**
     * Reload Process Discoverer without filters
     */
    private void reloadProcessDiscovererWithoutFilters() {
        try {
            LOGGER.info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ Process Discoverer –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤");
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            org.zkoss.zk.ui.Execution current = org.zkoss.zk.ui.Executions.getCurrent();
            
            // –°–æ–∑–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            Map<String, Object> args = new HashMap<>();
            args.put("logId", logId);
            args.put("logName", logName);
            args.put("clearFilters", true);
            
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Process Discoverer
            current.sendRedirect("/processdiscoverer");
            
            LOGGER.info("‚úÖ Process Discoverer –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤");
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ Process Discoverer", e);
        }
    }

    /**
     * Get selected filter values from current panel
     */
    private List<String> getSelectedFilterValues() {
        List<String> selectedValues = new ArrayList<>();
        
        try {
            switch (currentFilter) {
                case "caseAttribute":
                    if (attributeValuesList != null) {
                        for (Listitem item : attributeValuesList.getSelectedItems()) {
                            if (item.getFirstChild() instanceof Listcell) {
                                Listcell cell = (Listcell) item.getFirstChild();
                                if (cell.getLabel() != null) {
                                    selectedValues.add(cell.getLabel());
                                }
                            }
                        }
                    }
                    break;
                    
                case "caseId":
                    if (caseIdValuesList != null) {
                        for (Listitem item : caseIdValuesList.getSelectedItems()) {
                            if (item.getFirstChild() instanceof Listcell) {
                                Listcell cell = (Listcell) item.getFirstChild();
                                if (cell.getLabel() != null) {
                                    selectedValues.add(cell.getLabel());
                                }
                            }
                        }
                    }
                    break;
                    
                default:
                    LOGGER.warn("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è {} –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ", currentFilter);
                    break;
            }
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π", e);
        }
        
        return selectedValues;
    }

    /**
     * Open filtered log in Process Discoverer
     */
    private void openInProcessDiscoverer(List<String> selectedValues, String filterDescription) {
        try {
            LOGGER.info("üöÄ –û—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∞ –≤ Process Discoverer");
            LOGGER.info("üìã –§–∏–ª—å—Ç—Ä: {}", filterDescription);
            LOGGER.info("üìä –ó–Ω–∞—á–µ–Ω–∏—è: {}", selectedValues);
            
            if (logId == null || logId <= 0 || portalContext == null) {
                LOGGER.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Process Discoverer: logId={}, portalContext={}", logId, portalContext);
                Messagebox.show("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Process Discoverer", "–û—à–∏–±–∫–∞", Messagebox.OK, Messagebox.ERROR);
                return;
            }
            
            Set<LogSummaryType> selectedLogs = getSelectedLogsFromContext();
            if (selectedLogs.isEmpty()) {
                LOGGER.error("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –ª–æ–≥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ Process Discoverer");
                Messagebox.show("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ª–æ–≥", "–û—à–∏–±–∫–∞", Messagebox.OK, Messagebox.ERROR);
                return;
            }
            
            LogSummaryType selectedLog = selectedLogs.iterator().next();
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π PDFrequencyPlugin –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Process Discoverer
            if (processDiscovererPlugin != null) {
                LOGGER.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º PDFrequencyPlugin –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Process Discoverer");
                
                try {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞ openWithFilters
                    java.lang.reflect.Method openWithFiltersMethod = 
                        processDiscovererPlugin.getClass().getMethod("openWithFilters", 
                            org.apromore.plugin.portal.PortalContext.class, 
                            java.util.List.class);
                    
                    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    List<Object> logFilters = new ArrayList<>();
                    
                    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
                    openWithFiltersMethod.invoke(processDiscovererPlugin, portalContext, logFilters);
                    
                    LOGGER.info("‚úÖ Process Discoverer –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ PDFrequencyPlugin:");
                    LOGGER.info("   - –õ–æ–≥: {} (ID: {})", selectedLog.getName(), selectedLog.getId());
                    LOGGER.info("   - –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞: {}", currentFilter);
                    LOGGER.info("   - –í—ã–±—Ä–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π: {}", selectedValues.size());
                    
                    Messagebox.show("–õ–æ–≥ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –æ—Ç–∫—Ä—ã—Ç –≤ Process Discoverer", 
                                  "–£—Å–ø–µ—Ö", Messagebox.OK, Messagebox.INFORMATION);
                    
                } catch (Exception e) {
                    LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ PDFrequencyPlugin —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é", e);
                    // Fallback –∫ –ø—Ä—è–º–æ–º—É URL
                    throw e;
                }
                
            } else {
                LOGGER.warn("‚ö†Ô∏è PDFrequencyPlugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π URL");
                
                // Fallback: –ø—Ä—è–º–æ–π URL
                String pdUrl = String.format("processdiscoverer/zul/processDiscoverer.zul?REFER_ID=%s", 
                                            Executions.getCurrent().getDesktop().getId());
                
                String jsCode = String.format("window.open('%s', '_blank', 'width=1200,height=800,scrollbars=yes,resizable=yes');", pdUrl);
                Clients.evalJavaScript(jsCode);
                
                LOGGER.info("‚úÖ Process Discoverer –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π URL: {}", pdUrl);
                Messagebox.show("–õ–æ–≥ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –æ—Ç–∫—Ä—ã—Ç –≤ Process Discoverer", 
                              "–£—Å–ø–µ—Ö", Messagebox.OK, Messagebox.INFORMATION);
            }
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤ Process Discoverer", e);
            Messagebox.show("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ Process Discoverer: " + e.getMessage(), 
                          "–û—à–∏–±–∫–∞", Messagebox.OK, Messagebox.ERROR);
        }
    }

    /**
     * Get description of current filter settings
     */
    private String getCurrentFilterDescription() {
        try {
            switch (currentFilter) {
                case "caseAttribute":
                    String condition = caseAttributeCondition != null && caseAttributeCondition.getSelectedItem() != null ? 
                        caseAttributeCondition.getSelectedItem().getValue() : "retain";
                    String attribute = primaryAttributeCombo != null ? primaryAttributeCombo.getValue() : "Activity";
                    
                    // Count selected values
                    int selectedCount = 0;
                    if (attributeValuesList != null) {
                        selectedCount = attributeValuesList.getSelectedItems().size();
                    }
                    
                    return String.format("Case Attribute Filter: %s cases where '%s' matches %d selected values", 
                        condition.equals("retain") ? "Retain" : "Remove", attribute, selectedCount);
                        
                case "caseId":
                    String idCondition = caseIdCondition != null && caseIdCondition.getSelectedItem() != null ? 
                        caseIdCondition.getSelectedItem().getValue() : "retain";
                    
                    int selectedIds = 0;
                    if (caseIdValuesList != null) {
                        selectedIds = caseIdValuesList.getSelectedItems().size();
                    }
                    
                    return String.format("Case ID Filter: %s %d selected case IDs", 
                        idCondition.equals("retain") ? "Retain" : "Remove", selectedIds);
                        
                default:
                    return currentFilter + " filter (configuration pending)";
            }
        } catch (Exception e) {
            LOGGER.error("Error getting filter description", e);
            return "Filter applied";
        }
    }

    /**
     * Get selected logs from portal context
     */
    private Set<LogSummaryType> getSelectedLogsFromContext() {
        Set<LogSummaryType> selectedLogs = new HashSet<>();
        
        try {
            if (portalContext != null) {
                Map<SummaryType, List<VersionSummaryType>> elements = 
                    portalContext.getSelection().getSelectedProcessModelVersions();
                    
                for (Map.Entry<SummaryType, List<VersionSummaryType>> entry : elements.entrySet()) {
                    if (entry.getKey() instanceof LogSummaryType) {
                        selectedLogs.add((LogSummaryType) entry.getKey());
                    }
                }
            }
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤", e);
        }
        
        return selectedLogs;
    }
    
    /**
     * Prepare Process Discoverer session with proper initialization
     */
    private String prepareProcessDiscovererSession(LogSummaryType selectedLog, List<String> selectedValues, String filterDescription) {
        try {
            LOGGER.info("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏ Process Discoverer –¥–ª—è –ª–æ–≥–∞: {}", selectedLog.getName());
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö –≤ —Å–µ—Å—Å–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Process Discoverer
            Map<String, Object> filterData = new HashMap<>();
            filterData.put("filterType", currentFilter);
            filterData.put("filterDescription", filterDescription);
            filterData.put("selectedValues", selectedValues);
            filterData.put("logId", selectedLog.getId());
            filterData.put("logName", selectedLog.getName());
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
            String sessionId = "filter_" + selectedLog.getId() + "_" + System.currentTimeMillis();
            Sessions.getCurrent().setAttribute(sessionId, filterData);
            
            LOGGER.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–µ—Å—Å–∏–∏: {}", sessionId);
            return sessionId;
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ Process Discoverer", e);
            return null;
        }
    }
    
    /**
     * Apply filters directly to Process Discoverer
     */
    private void applyFiltersToProcessDiscoverer(List<String> selectedValues, String filterDescription) {
        try {
            LOGGER.info("üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ Process Discoverer");
            LOGGER.info("üìã –§–∏–ª—å—Ç—Ä: {}", filterDescription);
            LOGGER.info("üìä –ó–Ω–∞—á–µ–Ω–∏—è: {}", selectedValues);
            
            if (logFilterClient == null) {
                LOGGER.error("‚ùå LogFilterClient –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                Messagebox.show("–û—à–∏–±–∫–∞: LogFilterClient –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "–û—à–∏–±–∫–∞", Messagebox.OK, Messagebox.ERROR);
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            LOGGER.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...");
            List<LogFilterRule> filterRules = createFilterRules(selectedValues);
            LOGGER.info("üîß –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∞–≤–∏–ª: {}", filterRules.size());
            
            if (filterRules.isEmpty()) {
                LOGGER.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏");
                Messagebox.show("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", Messagebox.OK, Messagebox.EXCLAMATION);
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º LogFilterResponse —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–æ–º
            LOGGER.info("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –ª–æ–≥—É...");
            APMLog filteredLog = applyFiltersToLog(filterRules);
            LOGGER.info("üîß –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {}", filteredLog != null ? "—É—Å–ø–µ—à–Ω–æ" : "–Ω–µ—É–¥–∞—á–Ω–æ");
            
            if (filteredLog == null) {
                LOGGER.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∫ –ª–æ–≥—É");
                Messagebox.show("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∫ –ª–æ–≥—É", "–û—à–∏–±–∫–∞", Messagebox.OK, Messagebox.ERROR);
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º PLog –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ APMLog –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            LOGGER.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ PLog –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ APMLog...");
            LOGGER.info("üîß –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π APMLog —Å–æ–¥–µ—Ä–∂–∏—Ç {} —Ç—Ä–∞—Å—Å", apmLog.getTraces().size());
            
            PLog filteredPLog = new PLog(apmLog);
            LOGGER.info("üîß PLog —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞");
            LOGGER.info("üîß PLog —Å–æ–¥–µ—Ä–∂–∏—Ç {} —Ç—Ä–∞—Å—Å", filteredPLog.getPTraces().size());
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ PLog
            LOGGER.info("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ PLog...");
            APMLogFilter pLogFilter = new APMLogFilter(apmLog);
            pLogFilter.filter(filterRules);
            filteredPLog = pLogFilter.getPLog();
            
            LOGGER.info("üîß PLog –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç {} —Ç—Ä–∞—Å—Å", filteredPLog.getPTraces().size());
            
            if (filteredPLog.getPTraces().isEmpty()) {
                LOGGER.error("PLog –ø—É—Å—Ç –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤");
                Messagebox.show("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.", 
                              "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", Messagebox.OK, Messagebox.EXCLAMATION);
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º LogFilterResponse
            LOGGER.info("–°–æ–∑–¥–∞–Ω–∏–µ LogFilterResponse...");
            LOGGER.info("Log ID: {}", logId);
            LOGGER.info("Log Name: {}", logName);
            LOGGER.info("Filtered PLog traces: {}", filteredPLog.getPTraces().size());
            LOGGER.info("Filter rules count: {}", filterRules.size());
            
            LogFilterResponse response = new LogFilterResponse(
                logId,
                logName,
                apmLog,  //–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥
                filteredPLog,  // –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥
                filterRules,  //–ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
                new HashMap<>()  //–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            );
            
            LOGGER.info("LogFilterResponse —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            
            //–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LogFilterClient
            logFilterClient.processResponse(response);
            
            LOGGER.info("–§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ Process Discoverer:");
            LOGGER.info("   - –õ–æ–≥: {} (ID: {})", logName, logId);
            LOGGER.info("   - –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞: {}", currentFilter);
            LOGGER.info("   - –í—ã–±—Ä–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π: {}", selectedValues.size());
            LOGGER.info("   - –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∞–≤–∏–ª: {}", filterRules.size());
            LOGGER.info("   - –¢—Ä–∞—Å—Å –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–º –ª–æ–≥–µ: {}", filteredLog.getTraces().size());
            
            Messagebox.show("–§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ Process Discoverer", 
                          "–£—Å–ø–µ—Ö", Messagebox.OK, Messagebox.INFORMATION);
            
            //–∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            closeWindow();
            
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ Process Discoverer", e);
            LOGGER.error("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:", e);
            Messagebox.show("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: " + e.getMessage(), 
                          "–û—à–∏–±–∫–∞", Messagebox.OK, Messagebox.ERROR);
        }
    }
    
    /**
     * Create filter rules based on selected values and current filter type
     */
    private List<LogFilterRule> createFilterRules(List<String> selectedValues) {
        List<LogFilterRule> rules = new ArrayList<>();
        
        try {
            LOGGER.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞: {}", currentFilter);
            LOGGER.info("–í—ã–±—Ä–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π: {}", selectedValues.size());
            LOGGER.info("–ó–Ω–∞—á–µ–Ω–∏—è: {}", selectedValues);
            
            switch (currentFilter) {
                case "caseAttribute":
                    rules = createCaseAttributeFilterRules(selectedValues);
                    break;
                case "caseId":
                    rules = createCaseIdFilterRules(selectedValues);
                    break;
                default:
                    LOGGER.warn("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞: {}", currentFilter);
                    break;
            }
            
            LOGGER.info("–°–æ–∑–¥–∞–Ω–æ {} –ø—Ä–∞–≤–∏–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", rules.size());
            
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", e);
            LOGGER.error("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:", e);
            LOGGER.error("–¢–∏–ø –æ—à–∏–±–∫–∏: {}", e.getClass().getSimpleName());
            LOGGER.error("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: {}", e.getMessage());
        }
        
        return rules;
    }
    
    /**
     * Create filter rules for Case Attribute filtering
     */
    private List<LogFilterRule> createCaseAttributeFilterRules(List<String> selectedValues) {
        List<LogFilterRule> rules = new ArrayList<>();
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (Retain/Remove)
            String condition = caseAttributeCondition != null ? caseAttributeCondition.getSelectedItem().getValue() : "retain";
            Choice choice = "retain".equals(condition) ? Choice.RETAIN : Choice.REMOVE;
            
            // –°–æ–∑–¥–∞–µ–º RuleValue –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            Set<RuleValue> ruleValues = new HashSet<>();
            for (String value : selectedValues) {
                Set<String> valueSet = new HashSet<>();
                valueSet.add(value);
                LOGGER.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ RuleValue –¥–ª—è Case Attribute: filterType={}, operationType={}, key={}, value={}", 
                           FilterType.CASE_EVENT_ATTRIBUTE, OperationType.EQUAL, "concept:name", value);
                RuleValue ruleValue = new RuleValue(
                    FilterType.CASE_EVENT_ATTRIBUTE,
                    OperationType.EQUAL,
                    "concept:name",  // –∞—Ç—Ä–∏–±—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    valueSet
                );
                ruleValues.add(ruleValue);
                LOGGER.info("RuleValue —Å–æ–∑–¥–∞–Ω: objectVal={}, stringVal={}, stringSetValue={}", 
                           ruleValue.getObjectVal(), ruleValue.getStringValue(), ruleValue.getStringSetValue());
            }
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ init
            LogFilterRule rule = LogFilterRuleImpl.init(
                FilterType.CASE_EVENT_ATTRIBUTE,
                choice == Choice.RETAIN,
                ruleValues
            );
            
            rules.add(rule);
            LOGGER.info("–°–æ–∑–¥–∞–Ω–æ –ø—Ä–∞–≤–∏–ª–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ Case Attribute: {} –∑–Ω–∞—á–µ–Ω–∏–π, —É—Å–ª–æ–≤–∏–µ: {}", 
                       selectedValues.size(), condition);
            
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª Case Attribute", e);
            LOGGER.error("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:", e);
            LOGGER.error("–¢–∏–ø –æ—à–∏–±–∫–∏: {}", e.getClass().getSimpleName());
            LOGGER.error("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: {}", e.getMessage());
        }
        
        return rules;
    }
    
    /**
     * Create filter rules for Case ID filtering
     */
    private List<LogFilterRule> createCaseIdFilterRules(List<String> selectedValues) {
        List<LogFilterRule> rules = new ArrayList<>();
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (Retain/Remove)
            String condition = caseIdCondition != null ? caseIdCondition.getSelectedItem().getValue() : "retain";
            Choice choice = "retain".equals(condition) ? Choice.RETAIN : Choice.REMOVE;
            
            // –°–æ–∑–¥–∞–µ–º RuleValue –¥–ª—è Case ID —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            Set<RuleValue> ruleValues = new HashSet<>();
            
            // –°–æ–∑–¥–∞–µ–º BitSet –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤ —Ç—Ä–∞—Å—Å
            BitSet caseIdBitSet = new BitSet(apmLog.getTraces().size());
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º customAttributes –∏ BitSet
            RuleValue ruleValue = new RuleValue(
                FilterType.CASE_ID,
                OperationType.EQUAL,
                "concept:case:id",  // –∞—Ç—Ä–∏–±—É—Ç Case ID
                caseIdBitSet  // BitSet –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤
            );
            
            // –î–æ–±–∞–≤–ª—è–µ–º Case ID –≤ customAttributes –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –±–∏—Ç—ã
            for (String caseId : selectedValues) {
                ruleValue.getCustomAttributes().put(caseId, caseId);
                
                // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç—Ä–∞—Å—Å—ã —Å —ç—Ç–∏–º Case ID
                for (int i = 0; i < apmLog.getTraces().size(); i++) {
                    if (apmLog.getTraces().get(i).getCaseId().equals(caseId)) {
                        caseIdBitSet.set(i);
                        break;
                    }
                }
            }
            
            ruleValues.add(ruleValue);
            LOGGER.info("RuleValue —Å–æ–∑–¥–∞–Ω –¥–ª—è Case ID: objectVal={}, stringVal={}, customAttributes={}, bitSetValue={}", 
                       ruleValue.getObjectVal(), ruleValue.getStringValue(), ruleValue.getCustomAttributes(), ruleValue.getBitSetValue());
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ init
            LogFilterRule rule = LogFilterRuleImpl.init(
                FilterType.CASE_ID,
                choice == Choice.RETAIN,
                ruleValues
            );
            
            rules.add(rule);
            LOGGER.info("–°–æ–∑–¥–∞–Ω–æ –ø—Ä–∞–≤–∏–ª–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ Case ID: {} –∑–Ω–∞—á–µ–Ω–∏–π, —É—Å–ª–æ–≤–∏–µ: {}", 
                       selectedValues.size(), condition);
            
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª Case ID", e);
            LOGGER.error("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:", e);
            LOGGER.error("–¢–∏–ø –æ—à–∏–±–∫–∏: {}", e.getClass().getSimpleName());
            LOGGER.error("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: {}", e.getMessage());
        }
        
        return rules;
    }
    
    /**
     * Apply filters to the log using APMLogFilter
     */
    private APMLog applyFiltersToLog(List<LogFilterRule> filterRules) {
        try {
            if (apmLog == null) {
                LOGGER.error("APMLog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏");
                return null;
            }
            
            LOGGER.info("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {} –ø—Ä–∞–≤–∏–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫ –ª–æ–≥—É", filterRules.size());
            LOGGER.info("–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞: {}", currentFilter);
            LOGGER.info("–†–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞: {} —Ç—Ä–∞—Å—Å", apmLog.getTraces().size());
            
            // –°–æ–∑–¥–∞–µ–º APMLogFilter
            APMLogFilter apmLogFilter = new APMLogFilter(apmLog);
            LOGGER.info("APMLogFilter —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            apmLogFilter.filter(filterRules);
            LOGGER.info("–§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ APMLogFilter");
            
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥
            APMLog filteredLog;
            try {
                filteredLog = apmLogFilter.getAPMLog();
                
                LOGGER.info("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:");
                LOGGER.info("   - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥: {} —Ç—Ä–∞—Å—Å", apmLog.getTraces().size());
                LOGGER.info("   - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥: {} —Ç—Ä–∞—Å—Å", filteredLog.getTraces().size());
                
                return filteredLog;
            } catch (EmptyInputException e) {
                LOGGER.warn("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥ –ø—É—Å—Ç: {}", e.getMessage());
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥ –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ–ª–∞ –∫ –ø—É—Å—Ç–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                return apmLog;
            }
            
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –ª–æ–≥—É", e);
            LOGGER.error("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:", e);
            LOGGER.error("–¢–∏–ø –æ—à–∏–±–∫–∏: {}", e.getClass().getSimpleName());
            LOGGER.error("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: {}", e.getMessage());
            return null;
        }
    }
    

    

    

    


    /**
     * Close the filter window
     */
    private void closeWindow() {
        try {
                    if (advancedLogFilterWindow != null) {
            advancedLogFilterWindow.detach();
            }
            LOGGER.info("Filter window closed");
        } catch (Exception e) {
            LOGGER.error("Error closing window", e);
        }
    }
    
    /**
     * Display specific page of attribute values
     */
    private void displayAttributePage(int page) {
        try {
            LOGGER.info("üîÑ === –ù–ê–ß–ê–õ–û displayAttributePage({}) ===", page);
            if (attributeValuesList == null) {
                LOGGER.error("‚ùå attributeValuesList == null");
                return;
            }
            
            LOGGER.info("üîÑ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {} –∞—Ç—Ä–∏–±—É—Ç–æ–≤, –≤—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {}", page, allAttributeValues.size());
            
            attributeValuesList.getItems().clear();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (allAttributeValues.isEmpty()) {
                LOGGER.warn("‚ö†Ô∏è allAttributeValues –ø—É—Å—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...");
                loadAttributeValuesForLog();
                return; // –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ loadAttributeValuesForLog() –≤—ã–∑–æ–≤–µ—Ç displayAttributePage —Å–Ω–æ–≤–∞
            }
            
            int totalPages = (int) Math.ceil((double) allAttributeValues.size() / ITEMS_PER_PAGE);
            int startIndex = (page - 1) * ITEMS_PER_PAGE;
            int endIndex = Math.min(startIndex + ITEMS_PER_PAGE, allAttributeValues.size());
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞
            Map<String, Integer> attributeValueCounts = new HashMap<>();
            if (apmLog != null && primaryAttributeCombo != null) {
                Comboitem selectedItem = primaryAttributeCombo.getSelectedItem();
                if (selectedItem == null) {
                    LOGGER.error("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ primaryAttributeCombo");
                    return;
                }
                
                String selectedAttribute = selectedItem.getValue();
                LOGGER.info("üîß –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–∞: {}", selectedAttribute);
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞—Ç—Ä–∏–±—É—Ç–∞ (case –∏–ª–∏ event)
                boolean isCaseAttribute = selectedAttribute.equals("concept:case:id") || 
                                       selectedAttribute.equals("concept:name") ||
                                       selectedAttribute.startsWith("case:");
                
                LOGGER.info("üîß –¢–∏–ø –∞—Ç—Ä–∏–±—É—Ç–∞: {}", isCaseAttribute ? "CASE" : "EVENT");
                
                if (isCaseAttribute) {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º case attributes
                    for (ATrace trace : apmLog.getTraces()) {
                        if (trace.getAttributes() != null && trace.getAttributes().containsKey(selectedAttribute)) {
                            String value = trace.getAttributes().get(selectedAttribute).toString();
                            if (value != null && !value.isEmpty()) {
                                attributeValueCounts.put(value, attributeValueCounts.getOrDefault(value, 0) + 1);
                            }
                        }
                    }
                } else {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º event attributes
                    for (ATrace trace : apmLog.getTraces()) {
                        for (ActivityInstance activityInstance : trace.getActivityInstances()) {
                            if (activityInstance.getAttributes() != null && 
                                activityInstance.getAttributes().containsKey(selectedAttribute)) {
                                String value = activityInstance.getAttributes().get(selectedAttribute).toString();
                                if (value != null && !value.isEmpty()) {
                                    attributeValueCounts.put(value, attributeValueCounts.getOrDefault(value, 0) + 1);
                                }
                            }
                        }
                    }
                }
                
                LOGGER.info("üîß –ù–∞–π–¥–µ–Ω–æ {} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç–∞ '{}'", attributeValueCounts.size(), selectedAttribute);
            }
            
            int totalCases = attributeValueCounts.values().stream().mapToInt(Integer::intValue).sum();
            LOGGER.info("üîß –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤: {}", totalCases);
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            LOGGER.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É...");
            int addedItems = 0;
            for (int i = startIndex; i < endIndex; i++) {
                String attributeValue = allAttributeValues.get(i);
                int count = attributeValueCounts.getOrDefault(attributeValue, 0);
                double frequency = totalCases > 0 ? (double) count / totalCases * 100 : 0.0;
                
                LOGGER.info("üîß –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç {}: –∑–Ω–∞—á–µ–Ω–∏–µ='{}', –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ={}, —á–∞—Å—Ç–æ—Ç–∞={:.2f}%", 
                           i + 1, attributeValue, count, frequency);
                
                addAttributeValue(attributeValue, count, frequency);
                addedItems++;
            }
            
            LOGGER.info("üîß –î–æ–±–∞–≤–ª–µ–Ω–æ {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É", addedItems);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            updateAttributePagination(page, totalPages, startIndex + 1, endIndex);
            
            LOGGER.info("‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {} –∑–Ω–∞—á–µ–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç–∞ (—ç–ª–µ–º–µ–Ω—Ç—ã {}-{})", page, startIndex + 1, endIndex);
            LOGGER.info("üîÑ === –ö–û–ù–ï–¶ displayAttributePage({}) ===", page);
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–Ω–∞—á–µ–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç–∞", e);
        }
    }
    
    /**
     * Update attribute pagination controls
     */
    private void updateAttributePagination(int currentPage, int totalPages, int startItem, int endItem) {
        try {
            LOGGER.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {}/{}, —ç–ª–µ–º–µ–Ω—Ç—ã {}-{}", currentPage, totalPages, startItem, endItem);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
            if (firstPageBtn != null) {
                firstPageBtn.setDisabled(currentPage <= 1);
                LOGGER.debug("–ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' {}disabled", firstPageBtn.isDisabled() ? "" : "–Ω–µ ");
            }
            if (prevPageBtn != null) {
                prevPageBtn.setDisabled(currentPage <= 1);
                LOGGER.debug("–ö–Ω–æ–ø–∫–∞ '–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' {}disabled", prevPageBtn.isDisabled() ? "" : "–Ω–µ ");
            }
            if (nextPageBtn != null) {
                nextPageBtn.setDisabled(currentPage >= totalPages);
                LOGGER.debug("–ö–Ω–æ–ø–∫–∞ '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' {}disabled", nextPageBtn.isDisabled() ? "" : "–Ω–µ ");
            }
            if (lastPageBtn != null) {
                lastPageBtn.setDisabled(currentPage >= totalPages);
                LOGGER.debug("–ö–Ω–æ–ø–∫–∞ '–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' {}disabled", lastPageBtn.isDisabled() ? "" : "–Ω–µ ");
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
            if (pageLabel != null) {
                pageLabel.setValue(currentPage + " / " + totalPages);
                LOGGER.debug("–ú–µ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {}", pageLabel.getValue());
            }
            if (pageInfo != null) {
                pageInfo.setValue("–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + currentPage);
                LOGGER.debug("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {}", pageInfo.getValue());
            }
            if (totalInfo != null) {
                totalInfo.setValue(startItem + " - " + endItem + " / " + allAttributeValues.size());
                LOGGER.debug("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {}", totalInfo.getValue());
            }
            
            LOGGER.info("–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
            
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤", e);
        }
    }
    
    /**
     * Pagination event handlers for attributes
     */
    @Listen("onClick = #firstPageBtn")
    public void onFirstPage() {
        try {
            LOGGER.info("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—Ç—Ä–∏–±—É—Ç–æ–≤");
            if (currentAttributePage > 1) {
                currentAttributePage = 1;
                displayAttributePage(currentAttributePage);
            }
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—Ç—Ä–∏–±—É—Ç–æ–≤", e);
        }
    }
    
    @Listen("onClick = #prevPageBtn")
    public void onPrevPage() {
        try {
            LOGGER.info("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—Ç—Ä–∏–±—É—Ç–æ–≤");
            if (currentAttributePage > 1) {
                currentAttributePage--;
                displayAttributePage(currentAttributePage);
            }
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—Ç—Ä–∏–±—É—Ç–æ–≤", e);
        }
    }
    
    @Listen("onClick = #nextPageBtn")
    public void onNextPage() {
        try {
            LOGGER.info("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—Ç—Ä–∏–±—É—Ç–æ–≤");
            int totalPages = (int) Math.ceil((double) allAttributeValues.size() / ITEMS_PER_PAGE);
            if (currentAttributePage < totalPages) {
                currentAttributePage++;
                displayAttributePage(currentAttributePage);
            }
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—Ç—Ä–∏–±—É—Ç–æ–≤", e);
        }
    }
    
    @Listen("onClick = #lastPageBtn")
    public void onLastPage() {
        try {
            LOGGER.info("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—Ç—Ä–∏–±—É—Ç–æ–≤");
            int totalPages = (int) Math.ceil((double) allAttributeValues.size() / ITEMS_PER_PAGE);
            if (currentAttributePage < totalPages) {
                currentAttributePage = totalPages;
                displayAttributePage(currentAttributePage);
            }
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—Ç—Ä–∏–±—É—Ç–æ–≤", e);
        }
    }
    
    /**
     * Display specific page of case IDs
     */
    private void displayCaseIdPage(int page) {
        try {
            if (caseIdValuesList == null) {
                LOGGER.warn("caseIdValuesList –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }
            
            LOGGER.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {} Case ID (–≤—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {})", page, allCaseIdValues.size());
            
            caseIdValuesList.getItems().clear();
            
            if (allCaseIdValues.isEmpty()) {
                LOGGER.warn("–°–ø–∏—Å–æ–∫ Case ID –ø—É—Å—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ");
                loadCaseIdsForLog();
                return;
            }
            
            int totalPages = (int) Math.ceil((double) allCaseIdValues.size() / ITEMS_PER_PAGE);
            int startIndex = (page - 1) * ITEMS_PER_PAGE;
            int endIndex = Math.min(startIndex + ITEMS_PER_PAGE, allCaseIdValues.size());
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            Map<String, Integer> caseIdCounts = new HashMap<>();
            if (apmLog != null) {
                for (ATrace trace : apmLog.getTraces()) {
                    String caseId = trace.getCaseId();
                    if (caseId != null && !caseId.isEmpty()) {
                        int eventCount = trace.getActivityInstances().size();
                        caseIdCounts.put(caseId, eventCount);
                    }
                }
            }
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for (int i = startIndex; i < endIndex; i++) {
                String caseId = allCaseIdValues.get(i);
                int eventCount = caseIdCounts.getOrDefault(caseId, 0);
                addCaseId(caseId, eventCount);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            updateCaseIdPagination(page, totalPages, startIndex + 1, endIndex);
            
            LOGGER.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {} Case ID (—ç–ª–µ–º–µ–Ω—Ç—ã {}-{})", page, startIndex + 1, endIndex);
            
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Case ID", e);
        }
    }
    
    /**
     * Update case ID pagination controls
     */
    private void updateCaseIdPagination(int currentPage, int totalPages, int startItem, int endItem) {
        try {
            LOGGER.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ Case ID: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {}/{}, —ç–ª–µ–º–µ–Ω—Ç—ã {}-{}", currentPage, totalPages, startItem, endItem);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
            if (caseIdFirstPageBtn != null) {
                caseIdFirstPageBtn.setDisabled(currentPage <= 1);
                LOGGER.debug("–ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Case ID' {}disabled", caseIdFirstPageBtn.isDisabled() ? "" : "–Ω–µ ");
            }
            if (caseIdPrevPageBtn != null) {
                caseIdPrevPageBtn.setDisabled(currentPage <= 1);
                LOGGER.debug("–ö–Ω–æ–ø–∫–∞ '–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Case ID' {}disabled", caseIdPrevPageBtn.isDisabled() ? "" : "–Ω–µ ");
            }
            if (caseIdNextPageBtn != null) {
                caseIdNextPageBtn.setDisabled(currentPage >= totalPages);
                LOGGER.debug("–ö–Ω–æ–ø–∫–∞ '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Case ID' {}disabled", caseIdNextPageBtn.isDisabled() ? "" : "–Ω–µ ");
            }
            if (caseIdLastPageBtn != null) {
                caseIdLastPageBtn.setDisabled(currentPage >= totalPages);
                LOGGER.debug("–ö–Ω–æ–ø–∫–∞ '–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Case ID' {}disabled", caseIdLastPageBtn.isDisabled() ? "" : "–Ω–µ ");
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
            if (caseIdPageLabel != null) {
                caseIdPageLabel.setValue(currentPage + " / " + totalPages);
                LOGGER.debug("–ú–µ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Case ID –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {}", caseIdPageLabel.getValue());
            }
            if (caseIdPageInfo != null) {
                caseIdPageInfo.setValue("–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + currentPage);
                LOGGER.debug("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Case ID –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {}", caseIdPageInfo.getValue());
            }
            if (caseIdTotalInfo != null) {
                caseIdTotalInfo.setValue(startItem + " - " + endItem + " / " + allCaseIdValues.size());
                LOGGER.debug("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è Case ID –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {}", caseIdTotalInfo.getValue());
            }
            
            LOGGER.info("–ü–∞–≥–∏–Ω–∞—Ü–∏—è Case ID –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
            
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ Case ID", e);
        }
    }
    
    /**
     * Pagination event handlers for case IDs
     */
    @Listen("onClick = #caseIdFirstPageBtn")
    public void onCaseIdFirstPage() {
        try {
            LOGGER.info("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Case ID");
            if (currentCaseIdPage > 1) {
                currentCaseIdPage = 1;
                displayCaseIdPage(currentCaseIdPage);
            }
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Case ID", e);
        }
    }
    
    @Listen("onClick = #caseIdPrevPageBtn")
    public void onCaseIdPrevPage() {
        try {
            LOGGER.info("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Case ID");
            if (currentCaseIdPage > 1) {
                currentCaseIdPage--;
                displayCaseIdPage(currentCaseIdPage);
            }
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Case ID", e);
        }
    }
    
    @Listen("onClick = #caseIdNextPageBtn")
    public void onCaseIdNextPage() {
        try {
            LOGGER.info("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Case ID");
            int totalPages = (int) Math.ceil((double) allCaseIdValues.size() / ITEMS_PER_PAGE);
            if (currentCaseIdPage < totalPages) {
                currentCaseIdPage++;
                displayCaseIdPage(currentCaseIdPage);
            }
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Case ID", e);
        }
    }
    
    @Listen("onClick = #caseIdLastPageBtn")
    public void onCaseIdLastPage() {
        try {
            LOGGER.info("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Case ID");
            int totalPages = (int) Math.ceil((double) allCaseIdValues.size() / ITEMS_PER_PAGE);
            if (currentCaseIdPage < totalPages) {
                currentCaseIdPage = totalPages;
                displayCaseIdPage(currentCaseIdPage);
            }
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Case ID", e);
        }
    }

}